name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    name: Release - ${{ matrix.platform.target }}
    runs-on: ubuntu-latest
    container: ghcr.io/blackdex/rust-musl:${{ matrix.platform.tag }}
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            tag: aarch64-musl-stable
            artifact: csvs_linux_aarch64
          - target: x86_64-unknown-linux-musl
            tag: x86_64-musl-stable
            artifact: csvs_linux_x86_64
    steps:
      - uses: actions/checkout@master
      - run: cargo build --release
      - run: |
          mkdir ${{ matrix.platform.artifact }}
          cp *.md ${{ matrix.platform.artifact }}
          cp LICENSE ${{ matrix.platform.artifact }}
          cp target/${{ matrix.platform.target }}/release/csvs ${{ matrix.platform.artifact }}
          tar czf ${{ matrix.platform.artifact }}.tar.gz -C ${{ matrix.platform.artifact }} .
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}
          path: ${{ matrix.platform.artifact }}.tar.gz

  build-macos:
    name: Release - universal-apple-darwin
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@master

      - name: Build aarch64
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

      - name: Build x86_64
        run: |
          rustup target add x86_64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
      
      - name: Build universal binary
        run: |
          mkdir csvs_macos_universal
          cp *.md csvs_macos_universal
          cp LICENSE csvs_macos_universal
          lipo -create -output csvs_macos_universal/csvs target/aarch64-apple-darwin/release/csvs target/x86_64-apple-darwin/release/csvs

      - name: Import certification
        shell: bash
        run: |
          function import_cert() {
            security import "$1" -k ~/Library/Keychains/macos-build.keychain -P "$2" -T /usr/bin/codesign -T /usr/bin/productsign
          }
      
          # Create keychain
          security create-keychain -p actions macos-build.keychain
          security default-keychain -s macos-build.keychain
          security unlock-keychain -p actions macos-build.keychain
          security set-keychain-settings -t 3600 -u macos-build.keychain
      
          echo "${{ secrets.APPLE_CERT_DATA }}" | base64 --decode > developerID_application.p12
      
          # attempt to import p12 directly but fallback if it fails
          if ! import_cert developerID_application.p12 "${{ secrets.APPLE_CERT_PASSWORD }}"; then
            openssl pkcs12 -in developerID_application.p12 -nocerts -out "$RUNNER_TEMP/codesign.key" -nodes -password pass:"${{ secrets.APPLE_CERT_PASSWORD }}"
            openssl pkcs12 -in developerID_application.p12 -clcerts -nokeys -out "$RUNNER_TEMP/codesign.crt" -password pass:"${{ secrets.APPLE_CERT_PASSWORD }}"
            import_cert "$RUNNER_TEMP/codesign.key" ""
            import_cert "$RUNNER_TEMP/codesign.crt" ""
          fi
      
          # Key signing
          security set-key-partition-list -S apple-tool:,apple: -s -k actions macos-build.keychain
          # Scope out the keychain
          security find-identity -v macos-build.keychain
      
      - name: Signing with codesign
        run: |
          codesign -f --timestamp --options runtime -s "${{ secrets.APPLE_TEAM_ID }}" csvs_macos_universal/csvs
          codesign -v csvs_macos_universal/csvs --verbose
          hdiutil create -srcfolder csvs_macos_universal -format UDZO csvs_macos_universal.dmg
          codesign -f --timestamp -s "${{ secrets.APPLE_TEAM_ID }}" csvs_macos_universal.dmg
          codesign -v csvs_macos_universal.dmg --verbose
      
      - name: Upload to the notarization service
        uses: lando/notarize-action@v2
        with:
          appstore-connect-username: ${{ secrets.APPLE_NOTARY_USER }}
          appstore-connect-password: ${{ secrets.APPLE_NOTARY_PASSWORD }}
          appstore-connect-team-id: ${{ secrets.APPLE_TEAM_ID }}
          primary-bundle-id: jp.koma-private.csvs
          product-path: csvs_macos_universal.dmg
          tool: notarytool
          verbose: true
      
      - name: Verifying Notarization
        run: codesign -vvvv -R="notarized" --check-notarization csvs_macos_universal.dmg
      
      - name: Staple the ticket to the distribution
        run: xcrun stapler staple csvs_macos_universal.dmg

      - uses: actions/upload-artifact@v4
        with:
          name: csvs_macos_universal
          path: csvs_macos_universal.dmg

  build-windows:
    name: Release - ${{ matrix.platform.target }}
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - target: aarch64-pc-windows-msvc          
            artifact: csvs_windows_aarch64
          - target: x86_64-pc-windows-msvc          
            artifact: csvs_windows_x86_64
    steps:
      - uses: actions/checkout@master
      - uses: dtolnay/rust-toolchain@stable
      - run: |
          rustup target add ${{ matrix.platform.target }}
          cargo build --release --target ${{ matrix.platform.target }}
      - run: |
          New-Item ${{ matrix.platform.artifact }} -ItemType Directory
          Copy-Item *.md -Destination ${{ matrix.platform.artifact }}
          Copy-Item LICENSE -Destination ${{ matrix.platform.artifact }}
          Copy-Item target/${{ matrix.platform.target }}/release/csvs.exe -Destination ${{ matrix.platform.artifact }}
          Compress-Archive -Path ${{ matrix.platform.artifact }} -DestinationPath ${{ matrix.platform.artifact }}.zip
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}
          path: ${{ matrix.platform.artifact }}.zip

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          path: artifact
          merge-multiple: true

      - name: Checksum
        run: |
          echo CHECKSUM_LINUX_AARCH64="$(shasum -a 256 artifact/csvs_linux_aarch64.tar.gz | awk '{ print $1 }')" >> "$GITHUB_ENV"
          echo CHECKSUM_LINUX_X86_64="$(shasum -a 256 artifact/csvs_linux_x86_64.tar.gz | awk '{ print $1 }')" >> "$GITHUB_ENV"
          echo CHECKSUM_MACOS_UNIVERSAL="$(shasum -a 256 artifact/csvs_macos_universal.dmg | awk '{ print $1 }')" >> "$GITHUB_ENV"
          echo CHECKSUM_WINDOWS_AARCH64="$(shasum -a 256 artifact/csvs_windows_aarch64.zip | awk '{ print $1 }')" >> "$GITHUB_ENV"
          echo CHECKSUM_WINDOWS_X86_64="$(shasum -a 256 artifact/csvs_windows_x86_64.zip | awk '{ print $1 }')" >> "$GITHUB_ENV"

      - name: Release note
        run: |
          echo "## Distributions" > Distributions.md
          echo "| OS      | Arch                | Filename                  | SHA-256 Checksum                                                 |" >> Distributions.md
          echo "|---------|---------------------|---------------------------|------------------------------------------------------------------|" >> Distributions.md
          echo "| Windows | Intel/AMD 64bit     | csvs_windows_x86_64.zip   | ${{ env.CHECKSUM_WINDOWS_X86_64 }} |" >> Distributions.md
          echo "| Windows | ARM 64bit           | csvs_windows_aarch64.zip  | ${{ env.CHECKSUM_WINDOWS_AARCH64 }} |" >> Distributions.md
          echo "| macOS   | Intel/Apple silicon | csvs_macos_universal.dmg  | ${{ env.CHECKSUM_MACOS_UNIVERSAL }} |" >> Distributions.md
          echo "| Linux   | Intel/AMD 64bit     | csvs_linux_x86_64.tar.gz  | ${{ env.CHECKSUM_LINUX_X86_64 }} |" >> Distributions.md
          echo "| Linux   | ARM 64bit           | csvs_linux_aarch64.tar.gz | ${{ env.CHECKSUM_LINUX_AARCH64 }} |" >> Distributions.md
          cat Distributions.md

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: Distributions.md
          draft: true
          generate_release_notes: true
          files: |
            artifact/csvs_linux_aarch64.tar.gz
            artifact/csvs_linux_x86_64.tar.gz
            artifact/csvs_macos_universal.dmg
            artifact/csvs_windows_aarch64.zip
            artifact/csvs_windows_x86_64.zip
